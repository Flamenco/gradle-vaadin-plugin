import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'groovy'
    id 'maven'
    id 'idea'
    id "com.jfrog.bintray" version "1.6"
    id 'codenarc'
}

defaultTasks 'jar'
group = "fi.jasoft.plugin"
version = project.hasProperty('BUILD_VERSION') ? getProperty('BUILD_VERSION') : 'SNAPSHOT-'+ new Date().format('yyyyMMdd')
archivesBaseName ='gradle-vaadin-plugin'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories{
	mavenCentral()
}

configurations {
    deploy
}

dependencies {
    compile gradleApi()
    compile localGroovy()

    // Jetty application server
    def jettyVersion = '9.3.6.v20151106'
    compile "org.eclipse.jetty.aggregate:jetty-all:$jettyVersion"
    compile "org.eclipse.jetty:jetty-annotations:$jettyVersion"
    compile "org.eclipse.jetty:jetty-plus:$jettyVersion"
    compile "org.eclipse.jetty:jetty-deploy:$jettyVersion"

    //Payara application server
    def payaraVersion = '4.1.153'
    compile "fish.payara.extras:payara-embedded-web:$payaraVersion"

    // For GET requests
    compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'

    deploy 'org.apache.maven.wagon:wagon-ssh:2.2'

    testCompile gradleTestKit()
    testCompile 'junit:junit:4.12'
}

sourceSets {
    ast {
        groovy {
            srcDirs = ['src/ast']
        }
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
    include 'fi/**/*.groovy'
    include 'fi/**/*.java'
}

artifacts {
    archives jar
    archives sourcesJar
}

bintray {
    user = System.getProperty('PLUGIN_MAVEN_RELEASE_REPOSITORY_USER')
    key = System.getProperty('PLUGIN_MAVEN_RELEASE_REPOSITORY_PASSWORD')

    configurations = ['archives']

    dryRun = false
    publish = false
    pkg {
        repo = 'maven'
        name = 'gradle-vaadin-plugin'
        desc = 'Build Vaadin applications with Gradle!'
        websiteUrl = 'https://github.com/johndevs/gradle-vaadin-plugin'
        issueTrackerUrl = 'https://github.com/johndevs/gradle-vaadin-plugin/issues'
        vcsUrl = 'https://github.com/johndevs/gradle-vaadin-plugin.git'
        licenses = ['Apache-2.0']
        labels = ['vaadin','gradle','plugin']
        publicDownloadNumbers = true

        version {
            name = project.version
            vcsTag = project.version
            attributes = ['gradle-plugin': 'fi.jasoft.plugin.vaadin:fi.jasoft.plugin:gradle-vaadin-plugin']
        }
    }
}

task configurePluginPom << {
    configure(install.repositories.mavenInstaller) {
        pom.project {

           dependencies {
               dependency {
                   groupId 'org.codehaus.groovy.modules.http-builder'
                   artifactId 'http-builder'
                   version '0.7.1'
                   type 'pom'
               }
           }

           licenses {
               license {
                 name 'The Apache Software License, Version 2.0'
                 url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                 distribution 'repo'
               }
           }

           developers {
               developer {
                   id 'johndevs'
                   name 'John Ahlroos'
               }
           }

           scm {
               url 'https://github.com/johndevs/gradle-vaadin-plugin'
               connection 'scm:git://github.com/johndevs/gradle-vaadin-plugin'
               developerConnection 'scm:git@github.com:johndevs/gradle-vaadin-plugin'
          }
        }
        pom.scopeMappings.mappings.remove(configurations.compile)
   }
}
install.dependsOn configurePluginPom

uploadArchives {
    dependsOn configurePluginPom
    repositories.mavenDeployer {
        def snapshotRepositoryUrl = System.getProperty('PLUGIN_MAVEN_SNAPSHOT_REPOSITORY')
        def snapshotRepositoryUser = System.getProperty('PLUGIN_MAVEN_SNAPSHOT_REPOSITORY_USER')
        def snapshotRepositoryPassword = System.getProperty('PLUGIN_MAVEN_SNAPSHOT_REPOSITORY_PASSWORD')
        def snapshotRepositoryPrivateKey = System.getProperty('PLUGIN_MAVEN_SNAPSHOT_REPOSITORY_KEY')

        configuration = configurations.deploy

        snapshotRepository( url: snapshotRepositoryUrl ) {
           authentication(
                   userName: snapshotRepositoryUser,
                   password: snapshotRepositoryPassword,
                   privateKey: snapshotRepositoryPrivateKey
           )
        }
    }
}

// Use wrapper
task wrapper(type: Wrapper) {
	gradleVersion = '2.12'
}

task compileGroovyAstTransforms(type: GroovyCompile) {
    groovyOptions.with {
        fork = true
        keepStubs = false
        fileExtensions = ["groovy"]
    }
    source = sourceSets.ast.groovy.srcDirs
    classpath = sourceSets.main.compileClasspath
    destinationDir = sourceSets.ast.output.classesDir
}

compileGroovy {
    dependsOn compileGroovyAstTransforms
    classpath += files(sourceSets.ast.output.classesDir)
}

compileTestGroovy {
    dependsOn compileGroovyAstTransforms
    classpath += files(sourceSets.ast.output.classesDir)
}

processResources {

    // Apply build properties
    def debugDir = new File(project.buildDir, 'libs').canonicalPath
    from(sourceSets.main.resources.srcDirs){
        filter(ReplaceTokens, tokens: [
                version: project.version,
                debugdir: debugDir
        ])
    }
}

jar {
    manifest{
        attributes(
            'Vaadin-Package-Version': 1,
            'Vaadin-License-Title': 'Apache 2.0',
            'Implementation-Title': 'Vaadin Plugin for Gradle',
            'Implementation-Version': version,
            'Implementation-Vendor': 'John Ahlroos',
        )
    }
}

test {
    classpath += files(sourceSets.ast.output.classesDir)
    testLogging {
        exceptionFormat "full"
    }
    exclude '**/integration/**'
}


codenarc{
    toolVersion = '0.25.1'
    configFile = rootProject.file('config/codenarc/ruleset.groovy')
    maxPriority1Violations = 0
    maxPriority2Violations = 0
    maxPriority3Violations = 1300

    codenarcTest {
        configFile = rootProject.file('config/codenarc/ruleset-test.groovy')
    }
}


task integrationTest(type:Test, dependsOn:['test','jar']) {
    classpath += files(sourceSets.ast.output.classesDir)
    testLogging {
        exceptionFormat "full"
    }
    include '**/integration/**'
    systemProperty 'integrationTestProjectVersion', version
}
check.dependsOn 'integrationTest'
